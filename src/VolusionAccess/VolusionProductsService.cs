using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using CuttingEdge.Conditions;
using VolusionAccess.Misc;
using VolusionAccess.Models.Command;
using VolusionAccess.Models.Configuration;
using VolusionAccess.Models.Product;
using VolusionAccess.Services;

namespace VolusionAccess
{
	public class VolusionProductsService : IVolusionProductsService
	{
		private readonly WebRequestServices _webRequestServices;
		private readonly VolusionConfig _config;

		public VolusionProductsService( VolusionConfig config )
		{
			Condition.Requires( config, "config" ).IsNotNull();
			this._webRequestServices = new WebRequestServices( config );
			_config = config;
		}

		#region Get
		/// <summary>
		/// The All Products Export Feature of the API are basic functions that are auto-generated by the Volusion system. 
		/// Once generated, the XML code is updated automatically on a regularly, timed basis. The auto-update takes place at 12:00 AM US Central Standard Time. 
		/// </summary>
		/// <returns></returns>
		public IEnumerable< VolusionPublicProduct > GetPublicProducts()
		{
			var products = new List< VolusionPublicProduct >();
			var endpoint = EndpointsBuilder.CreateGetPublicProductsEndpoint().GetFullEndpoint( _config );

			ActionPolicies.Get.Do( () =>
			{
				var tmp = this._webRequestServices.GetResponseForSpecificUrl< VolusionPublicProducts >( endpoint );
				if( tmp != null && tmp.Products != null && tmp.Products.Count > 0 )
					products.AddRange( tmp.Products );
			} );

			return products;
		}

		/// <summary>
		/// The All Products Export Feature of the API are basic functions that are auto-generated by the Volusion system. 
		/// Once generated, the XML code is updated automatically on a regularly, timed basis. The auto-update takes place at 12:00 AM US Central Standard Time. 
		/// </summary>
		/// <returns></returns>
		public async Task< IEnumerable< VolusionPublicProduct > > GetPublicProductsAsync()
		{
			var products = new List< VolusionPublicProduct >();
			var endpoint = EndpointsBuilder.CreateGetPublicProductsEndpoint().GetFullEndpoint( _config );

			await ActionPolicies.GetAsync.Do( async () =>
			{
				var tmp = await this._webRequestServices.GetResponseForSpecificUrlAsync< VolusionPublicProducts >( endpoint );
				if( tmp != null && tmp.Products != null && tmp.Products.Count > 0 )
					products.AddRange( tmp.Products );
			} );

			return products;
		}

		public IEnumerable< VolusionProduct > GetProducts()
		{
			var products = new List< VolusionProduct >();
			IList< VolusionProduct > productsPortion = null;
			var endpoint = EndpointsBuilder.CreateGetProductsEndpoint();

			do
			{
				ActionPolicies.Get.Do( () =>
				{
					var tmp = this._webRequestServices.GetResponse< VolusionProducts >( endpoint );
					productsPortion = tmp != null ? tmp.Products : null;
					if( productsPortion != null )
						products.AddRange( productsPortion );
				} );
			} while( productsPortion != null && productsPortion.Count != 0 );

			return products;
		}

		public async Task< IEnumerable< VolusionProduct > > GetProductsAsync()
		{
			var products = new List< VolusionProduct >();
			IList< VolusionProduct > productsPortion = null;
			var endpoint = EndpointsBuilder.CreateGetProductsEndpoint();

			do
			{
				await ActionPolicies.GetAsync.Do( async () =>
				{
					var tmp = await this._webRequestServices.GetResponseAsync< VolusionProducts >( endpoint );
					productsPortion = tmp != null ? tmp.Products : null;
					if( productsPortion != null )
						products.AddRange( productsPortion );
				} );
			} while( productsPortion != null && productsPortion.Count != 0 );

			return products;
		}

		public IEnumerable< VolusionProduct > GetFilteredProducts( string columnName, string value )
		{
			var products = new List< VolusionProduct >();
			var endpoint = EndpointsBuilder.CreateGetFilteredProductsEndpoint( columnName, value );

			ActionPolicies.Get.Do( () =>
			{
				var tmp = this._webRequestServices.GetResponse< VolusionProducts >( endpoint );
				if( tmp != null && tmp.Products != null )
					products.AddRange( tmp.Products );
			} );

			return products;
		}

		public async Task< IEnumerable< VolusionProduct > > GetFilteredProductsAsync( string columnName, string value )
		{
			var products = new List< VolusionProduct >();
			var endpoint = EndpointsBuilder.CreateGetFilteredProductsEndpoint( columnName, value );

			await ActionPolicies.GetAsync.Do( async () =>
			{
				var tmp = await this._webRequestServices.GetResponseAsync< VolusionProducts >( endpoint );
				if( tmp != null && tmp.Products != null )
					products.AddRange( tmp.Products );
			} );

			return products;
		}

		public IEnumerable< VolusionProduct > GetFakeFilteredProducts()
		{
			var products = GetFilteredProducts( ProductColumns.AddToPONow.Name, "N" );
			return products;
		}

		public async Task< IEnumerable< VolusionProduct > > GetFakeFilteredProductsAsync()
		{
			var products = await GetFilteredProductsAsync( ProductColumns.AddToPONow.Name, "N" );
			return products;
		}

		public VolusionProduct GetProduct( string sku )
		{
			VolusionProduct product = null;
			var endpoint = EndpointsBuilder.CreateGetProductEndpoint( sku );

			ActionPolicies.Get.Do( () =>
			{
				var tmp = this._webRequestServices.GetResponse< VolusionProducts >( endpoint );
				if( tmp != null && tmp.Products != null )
					product = tmp.Products.FirstOrDefault();
			} );

			return product;
		}

		public async Task< VolusionProduct > GetProductAsync( string sku )
		{
			VolusionProduct product = null;
			var endpoint = EndpointsBuilder.CreateGetProductEndpoint( sku );

			await ActionPolicies.GetAsync.Do( async () =>
			{
				var tmp = await this._webRequestServices.GetResponseAsync< VolusionProducts >( endpoint );
				if( tmp != null && tmp.Products != null )
					product = tmp.Products.FirstOrDefault();
			} );

			return product;
		}

		public IEnumerable< VolusionProduct > GetChildProducts( string sku )
		{
			List< VolusionProduct > products = null;
			var endpoint = EndpointsBuilder.CreateGetChildProductsEndpoint( sku );

			ActionPolicies.Get.Do( () =>
			{
				var tmp = this._webRequestServices.GetResponse< VolusionProducts >( endpoint );
				if( tmp != null && tmp.Products != null )
					products = tmp.Products;
			} );

			return products;
		}

		public async Task< IEnumerable< VolusionProduct > > GetChildProductAsync( string sku )
		{
			List< VolusionProduct > products = null;
			var endpoint = EndpointsBuilder.CreateGetChildProductsEndpoint( sku );

			await ActionPolicies.GetAsync.Do( async () =>
			{
				var tmp = await this._webRequestServices.GetResponseAsync< VolusionProducts >( endpoint );
				if( tmp != null && tmp.Products != null )
					products = tmp.Products;
			} );

			return products;
		}
		#endregion

		#region Update
		public void UpdateProducts( IEnumerable< VolusionUpdatedProduct > products )
		{
			var endpoint = EndpointsBuilder.CreateProductsUpdateEndpoint();
			var vp = new VolusionUpdatedProducts { Products = products.ToList() };
			var xmlContent = XmlSerializeHelpers.Serialize( vp );

			ActionPolicies.Submit.Do( () => this._webRequestServices.PostData( endpoint, xmlContent ) );
		}

		public async Task UpdateProductsAsync( IEnumerable< VolusionUpdatedProduct > products )
		{
			var endpoint = EndpointsBuilder.CreateProductsUpdateEndpoint();
			var vp = new VolusionUpdatedProducts { Products = products.ToList() };
			var xmlContent = XmlSerializeHelpers.Serialize( vp );

			await ActionPolicies.SubmitAsync.Do( async () =>
			{
				await this._webRequestServices.PostDataAsync( endpoint, xmlContent );
			} );
		}
		#endregion
	}
}